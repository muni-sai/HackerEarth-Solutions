Cyclic shift
A large binary number is represented by a string 
 of size 
 and comprises of 
 and 
. You must perform a cyclic shift on this string. The cyclic shift operation is defined as follows:

If the string 
 is 
, then after performing one cyclic shift, the string becomes 
.
You performed the shift infinite number of times and each time you recorded the value of the binary number represented by the string. The maximum binary number formed after performing (possibly 
) the operation is 
. Your task is to determine the number of cyclic shifts that can be performed such that the value represented by the string 
 will be equal to 
 for the 
 time.

Video approach to solve this question: here

Input format

First line: A single integer 
 denoting the number of test cases
For each test case:
First line: Two space-separated integers 
 and 
Second line: 
 denoting the string
Output format

For each test case, print a single line containing one integer that represents the number of cyclic shift operations performed such that the value represented by string 
 is equal to 
 for the 
 time.

Constraints


, for each 

Note: Sum of 
 overall test cases does not exceed 

Sample Input
2
5 2
10101
6 2
010101
Sample Output
9
3
Explanation
For the 1st test case, the value of 
 is 
. After performing 
 cyclic shifts the value represented by array 
 becomes equal to 
 for the first time. After performing additional 
 cyclic shifts the value represented by array 
 becomes 
  for the second time. Hence, the answer is 

For the 2nd test case, the value of 
 is 
. After performing 
 cyclic shifts the value represented by array 
 becomes equal to 
 for the first time. After performing additional 
 cyclic shifts the value represented by array 
 becomes 
 for the second time. Hence, the answer is 



Java 14 Code:

package com.rockey.hackerearth.arraysandstrings.cyclicshift;

import java.util.Scanner;

public class cyclicshift {
  public static void main(String[] args) {

    Scanner scanner = new Scanner(System.in);
    int NumberOfTestCases = Integer.parseInt(scanner.nextLine());
    StringBuilder stringBuilder = new StringBuilder();
    while (NumberOfTestCases-- > 0) {
      String[] line = scanner.nextLine().split(" ");
      int length = Integer.parseInt(line[0]);
      int numberOfTimes = Integer.parseInt(line[1]);
      String A = scanner.nextLine();
      stringBuilder.append(moveToMax(A, length, numberOfTimes));
      stringBuilder.append("\n");
    }
    System.out.println(stringBuilder.toString());
  }

  private static long moveToMax(String A, int N, int K) {
    String B = A;
    int AToB = 0;
    int BToA = N;
    boolean foundAgain = false;
    String cyclicString = A + A;
    for (int i = 1; i < A.length(); i++) {
      String subString = cyclicString.substring(i, i + N);
      if (subString.equals(A) && !foundAgain) {
        BToA = i - AToB;
        foundAgain = true;
      } else if (subString.compareTo(B) > 0) {
        B = subString;
        AToB = i;
        BToA = N - i;
      }
    }
    return ((long) K - 1) * ((long) (AToB + BToA)) + AToB;
  }
}
